
PCA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003298  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033d0  080033d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d0  080033d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080033e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080033e4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000831a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001533  00000000  00000000  0002834f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002a178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012e36  00000000  00000000  0002a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f81  00000000  00000000  0003d806  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068936  00000000  00000000  00044787  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad0bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002488  00000000  00000000  000ad138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800338c 	.word	0x0800338c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800338c 	.word	0x0800338c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 ff80 	bl	800306c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800043e:	2b02      	cmp	r3, #2
 8000440:	d005      	beq.n	800044e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2204      	movs	r2, #4
 8000446:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e051      	b.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f022 020e 	bic.w	r2, r2, #14
 800045c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f022 0201 	bic.w	r2, r2, #1
 800046c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <HAL_DMA_Abort_IT+0xd0>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d029      	beq.n	80004cc <HAL_DMA_Abort_IT+0xa0>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a20      	ldr	r2, [pc, #128]	; (8000500 <HAL_DMA_Abort_IT+0xd4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d022      	beq.n	80004c8 <HAL_DMA_Abort_IT+0x9c>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <HAL_DMA_Abort_IT+0xd8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d01a      	beq.n	80004c2 <HAL_DMA_Abort_IT+0x96>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1d      	ldr	r2, [pc, #116]	; (8000508 <HAL_DMA_Abort_IT+0xdc>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d012      	beq.n	80004bc <HAL_DMA_Abort_IT+0x90>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <HAL_DMA_Abort_IT+0xe0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d00a      	beq.n	80004b6 <HAL_DMA_Abort_IT+0x8a>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <HAL_DMA_Abort_IT+0xe4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d102      	bne.n	80004b0 <HAL_DMA_Abort_IT+0x84>
 80004aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ae:	e00e      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004b4:	e00b      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	e008      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c0:	e005      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c6:	e002      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c8:	2310      	movs	r3, #16
 80004ca:	e000      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004cc:	2301      	movs	r3, #1
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_DMA_Abort_IT+0xe8>)
 80004d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d003      	beq.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	4798      	blx	r3
    } 
  }
  return status;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020008 	.word	0x40020008
 8000500:	4002001c 	.word	0x4002001c
 8000504:	40020030 	.word	0x40020030
 8000508:	40020044 	.word	0x40020044
 800050c:	40020058 	.word	0x40020058
 8000510:	4002006c 	.word	0x4002006c
 8000514:	40020000 	.word	0x40020000

08000518 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000530:	b480      	push	{r7}
 8000532:	b08b      	sub	sp, #44	; 0x2c
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800053a:	2300      	movs	r3, #0
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000542:	e127      	b.n	8000794 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000544:	2201      	movs	r2, #1
 8000546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	69fa      	ldr	r2, [r7, #28]
 8000554:	4013      	ands	r3, r2
 8000556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000558:	69ba      	ldr	r2, [r7, #24]
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	429a      	cmp	r2, r3
 800055e:	f040 8116 	bne.w	800078e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	2b12      	cmp	r3, #18
 8000568:	d034      	beq.n	80005d4 <HAL_GPIO_Init+0xa4>
 800056a:	2b12      	cmp	r3, #18
 800056c:	d80d      	bhi.n	800058a <HAL_GPIO_Init+0x5a>
 800056e:	2b02      	cmp	r3, #2
 8000570:	d02b      	beq.n	80005ca <HAL_GPIO_Init+0x9a>
 8000572:	2b02      	cmp	r3, #2
 8000574:	d804      	bhi.n	8000580 <HAL_GPIO_Init+0x50>
 8000576:	2b00      	cmp	r3, #0
 8000578:	d031      	beq.n	80005de <HAL_GPIO_Init+0xae>
 800057a:	2b01      	cmp	r3, #1
 800057c:	d01c      	beq.n	80005b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800057e:	e048      	b.n	8000612 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000580:	2b03      	cmp	r3, #3
 8000582:	d043      	beq.n	800060c <HAL_GPIO_Init+0xdc>
 8000584:	2b11      	cmp	r3, #17
 8000586:	d01b      	beq.n	80005c0 <HAL_GPIO_Init+0x90>
          break;
 8000588:	e043      	b.n	8000612 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800058a:	4a89      	ldr	r2, [pc, #548]	; (80007b0 <HAL_GPIO_Init+0x280>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d026      	beq.n	80005de <HAL_GPIO_Init+0xae>
 8000590:	4a87      	ldr	r2, [pc, #540]	; (80007b0 <HAL_GPIO_Init+0x280>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d806      	bhi.n	80005a4 <HAL_GPIO_Init+0x74>
 8000596:	4a87      	ldr	r2, [pc, #540]	; (80007b4 <HAL_GPIO_Init+0x284>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d020      	beq.n	80005de <HAL_GPIO_Init+0xae>
 800059c:	4a86      	ldr	r2, [pc, #536]	; (80007b8 <HAL_GPIO_Init+0x288>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d01d      	beq.n	80005de <HAL_GPIO_Init+0xae>
          break;
 80005a2:	e036      	b.n	8000612 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80005a4:	4a85      	ldr	r2, [pc, #532]	; (80007bc <HAL_GPIO_Init+0x28c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d019      	beq.n	80005de <HAL_GPIO_Init+0xae>
 80005aa:	4a85      	ldr	r2, [pc, #532]	; (80007c0 <HAL_GPIO_Init+0x290>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d016      	beq.n	80005de <HAL_GPIO_Init+0xae>
 80005b0:	4a84      	ldr	r2, [pc, #528]	; (80007c4 <HAL_GPIO_Init+0x294>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d013      	beq.n	80005de <HAL_GPIO_Init+0xae>
          break;
 80005b6:	e02c      	b.n	8000612 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	623b      	str	r3, [r7, #32]
          break;
 80005be:	e028      	b.n	8000612 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	3304      	adds	r3, #4
 80005c6:	623b      	str	r3, [r7, #32]
          break;
 80005c8:	e023      	b.n	8000612 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	3308      	adds	r3, #8
 80005d0:	623b      	str	r3, [r7, #32]
          break;
 80005d2:	e01e      	b.n	8000612 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	330c      	adds	r3, #12
 80005da:	623b      	str	r3, [r7, #32]
          break;
 80005dc:	e019      	b.n	8000612 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d102      	bne.n	80005ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005e6:	2304      	movs	r3, #4
 80005e8:	623b      	str	r3, [r7, #32]
          break;
 80005ea:	e012      	b.n	8000612 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d105      	bne.n	8000600 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005f4:	2308      	movs	r3, #8
 80005f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	69fa      	ldr	r2, [r7, #28]
 80005fc:	611a      	str	r2, [r3, #16]
          break;
 80005fe:	e008      	b.n	8000612 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000600:	2308      	movs	r3, #8
 8000602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	69fa      	ldr	r2, [r7, #28]
 8000608:	615a      	str	r2, [r3, #20]
          break;
 800060a:	e002      	b.n	8000612 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
          break;
 8000610:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	2bff      	cmp	r3, #255	; 0xff
 8000616:	d801      	bhi.n	800061c <HAL_GPIO_Init+0xec>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	e001      	b.n	8000620 <HAL_GPIO_Init+0xf0>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3304      	adds	r3, #4
 8000620:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	2bff      	cmp	r3, #255	; 0xff
 8000626:	d802      	bhi.n	800062e <HAL_GPIO_Init+0xfe>
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	e002      	b.n	8000634 <HAL_GPIO_Init+0x104>
 800062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000630:	3b08      	subs	r3, #8
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	210f      	movs	r1, #15
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	401a      	ands	r2, r3
 8000646:	6a39      	ldr	r1, [r7, #32]
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	431a      	orrs	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	2b00      	cmp	r3, #0
 800065e:	f000 8096 	beq.w	800078e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b59      	ldr	r3, [pc, #356]	; (80007c8 <HAL_GPIO_Init+0x298>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a58      	ldr	r2, [pc, #352]	; (80007c8 <HAL_GPIO_Init+0x298>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b56      	ldr	r3, [pc, #344]	; (80007c8 <HAL_GPIO_Init+0x298>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800067a:	4a54      	ldr	r2, [pc, #336]	; (80007cc <HAL_GPIO_Init+0x29c>)
 800067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	3302      	adds	r3, #2
 8000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000686:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	f003 0303 	and.w	r3, r3, #3
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	220f      	movs	r2, #15
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	4013      	ands	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a4b      	ldr	r2, [pc, #300]	; (80007d0 <HAL_GPIO_Init+0x2a0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d013      	beq.n	80006ce <HAL_GPIO_Init+0x19e>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a4a      	ldr	r2, [pc, #296]	; (80007d4 <HAL_GPIO_Init+0x2a4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d00d      	beq.n	80006ca <HAL_GPIO_Init+0x19a>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a49      	ldr	r2, [pc, #292]	; (80007d8 <HAL_GPIO_Init+0x2a8>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d007      	beq.n	80006c6 <HAL_GPIO_Init+0x196>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a48      	ldr	r2, [pc, #288]	; (80007dc <HAL_GPIO_Init+0x2ac>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d101      	bne.n	80006c2 <HAL_GPIO_Init+0x192>
 80006be:	2303      	movs	r3, #3
 80006c0:	e006      	b.n	80006d0 <HAL_GPIO_Init+0x1a0>
 80006c2:	2304      	movs	r3, #4
 80006c4:	e004      	b.n	80006d0 <HAL_GPIO_Init+0x1a0>
 80006c6:	2302      	movs	r3, #2
 80006c8:	e002      	b.n	80006d0 <HAL_GPIO_Init+0x1a0>
 80006ca:	2301      	movs	r3, #1
 80006cc:	e000      	b.n	80006d0 <HAL_GPIO_Init+0x1a0>
 80006ce:	2300      	movs	r3, #0
 80006d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d2:	f002 0203 	and.w	r2, r2, #3
 80006d6:	0092      	lsls	r2, r2, #2
 80006d8:	4093      	lsls	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80006e0:	493a      	ldr	r1, [pc, #232]	; (80007cc <HAL_GPIO_Init+0x29c>)
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	089b      	lsrs	r3, r3, #2
 80006e6:	3302      	adds	r3, #2
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	4313      	orrs	r3, r2
 8000704:	600b      	str	r3, [r1, #0]
 8000706:	e006      	b.n	8000716 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000708:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	43db      	mvns	r3, r3
 8000710:	4933      	ldr	r1, [pc, #204]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	492e      	ldr	r1, [pc, #184]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	4313      	orrs	r3, r2
 800072c:	604b      	str	r3, [r1, #4]
 800072e:	e006      	b.n	800073e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000732:	685a      	ldr	r2, [r3, #4]
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	43db      	mvns	r3, r3
 8000738:	4929      	ldr	r1, [pc, #164]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 800073a:	4013      	ands	r3, r2
 800073c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	4924      	ldr	r1, [pc, #144]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	4313      	orrs	r3, r2
 8000754:	608b      	str	r3, [r1, #8]
 8000756:	e006      	b.n	8000766 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	43db      	mvns	r3, r3
 8000760:	491f      	ldr	r1, [pc, #124]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000762:	4013      	ands	r3, r2
 8000764:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d006      	beq.n	8000780 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	491a      	ldr	r1, [pc, #104]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	4313      	orrs	r3, r2
 800077c:	60cb      	str	r3, [r1, #12]
 800077e:	e006      	b.n	800078e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	43db      	mvns	r3, r3
 8000788:	4915      	ldr	r1, [pc, #84]	; (80007e0 <HAL_GPIO_Init+0x2b0>)
 800078a:	4013      	ands	r3, r2
 800078c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	3301      	adds	r3, #1
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	fa22 f303 	lsr.w	r3, r2, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f47f aed0 	bne.w	8000544 <HAL_GPIO_Init+0x14>
  }
}
 80007a4:	bf00      	nop
 80007a6:	372c      	adds	r7, #44	; 0x2c
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	10210000 	.word	0x10210000
 80007b4:	10110000 	.word	0x10110000
 80007b8:	10120000 	.word	0x10120000
 80007bc:	10310000 	.word	0x10310000
 80007c0:	10320000 	.word	0x10320000
 80007c4:	10220000 	.word	0x10220000
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	40011000 	.word	0x40011000
 80007dc:	40011400 	.word	0x40011400
 80007e0:	40010400 	.word	0x40010400

080007e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e10f      	b.n	8000a16 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d106      	bne.n	8000810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f002 fc60 	bl	80030d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2224      	movs	r2, #36	; 0x24
 8000814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 0201 	bic.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000828:	f001 ff92 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 800082c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a7b      	ldr	r2, [pc, #492]	; (8000a20 <HAL_I2C_Init+0x23c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d807      	bhi.n	8000848 <HAL_I2C_Init+0x64>
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4a7a      	ldr	r2, [pc, #488]	; (8000a24 <HAL_I2C_Init+0x240>)
 800083c:	4293      	cmp	r3, r2
 800083e:	bf94      	ite	ls
 8000840:	2301      	movls	r3, #1
 8000842:	2300      	movhi	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	e006      	b.n	8000856 <HAL_I2C_Init+0x72>
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4a77      	ldr	r2, [pc, #476]	; (8000a28 <HAL_I2C_Init+0x244>)
 800084c:	4293      	cmp	r3, r2
 800084e:	bf94      	ite	ls
 8000850:	2301      	movls	r3, #1
 8000852:	2300      	movhi	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e0db      	b.n	8000a16 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4a72      	ldr	r2, [pc, #456]	; (8000a2c <HAL_I2C_Init+0x248>)
 8000862:	fba2 2303 	umull	r2, r3, r2, r3
 8000866:	0c9b      	lsrs	r3, r3, #18
 8000868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	430a      	orrs	r2, r1
 800087c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	4a64      	ldr	r2, [pc, #400]	; (8000a20 <HAL_I2C_Init+0x23c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d802      	bhi.n	8000898 <HAL_I2C_Init+0xb4>
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	3301      	adds	r3, #1
 8000896:	e009      	b.n	80008ac <HAL_I2C_Init+0xc8>
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	4a63      	ldr	r2, [pc, #396]	; (8000a30 <HAL_I2C_Init+0x24c>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	099b      	lsrs	r3, r3, #6
 80008aa:	3301      	adds	r3, #1
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80008be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	4956      	ldr	r1, [pc, #344]	; (8000a20 <HAL_I2C_Init+0x23c>)
 80008c8:	428b      	cmp	r3, r1
 80008ca:	d80d      	bhi.n	80008e8 <HAL_I2C_Init+0x104>
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	1e59      	subs	r1, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80008da:	3301      	adds	r3, #1
 80008dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	bf38      	it	cc
 80008e4:	2304      	movcc	r3, #4
 80008e6:	e04f      	b.n	8000988 <HAL_I2C_Init+0x1a4>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d111      	bne.n	8000914 <HAL_I2C_Init+0x130>
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1e58      	subs	r0, r3, #1
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	440b      	add	r3, r1
 80008fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000902:	3301      	adds	r3, #1
 8000904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf0c      	ite	eq
 800090c:	2301      	moveq	r3, #1
 800090e:	2300      	movne	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	e012      	b.n	800093a <HAL_I2C_Init+0x156>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	1e58      	subs	r0, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6859      	ldr	r1, [r3, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	0099      	lsls	r1, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	fbb0 f3f3 	udiv	r3, r0, r3
 800092a:	3301      	adds	r3, #1
 800092c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf0c      	ite	eq
 8000934:	2301      	moveq	r3, #1
 8000936:	2300      	movne	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_I2C_Init+0x15e>
 800093e:	2301      	movs	r3, #1
 8000940:	e022      	b.n	8000988 <HAL_I2C_Init+0x1a4>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10e      	bne.n	8000968 <HAL_I2C_Init+0x184>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	1e58      	subs	r0, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6859      	ldr	r1, [r3, #4]
 8000952:	460b      	mov	r3, r1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	440b      	add	r3, r1
 8000958:	fbb0 f3f3 	udiv	r3, r0, r3
 800095c:	3301      	adds	r3, #1
 800095e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000966:	e00f      	b.n	8000988 <HAL_I2C_Init+0x1a4>
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	1e58      	subs	r0, r3, #1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6859      	ldr	r1, [r3, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	0099      	lsls	r1, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	fbb0 f3f3 	udiv	r3, r0, r3
 800097e:	3301      	adds	r3, #1
 8000980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	6809      	ldr	r1, [r1, #0]
 800098c:	4313      	orrs	r3, r2
 800098e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69da      	ldr	r2, [r3, #28]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a1b      	ldr	r3, [r3, #32]
 80009a2:	431a      	orrs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80009b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	6911      	ldr	r1, [r2, #16]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68d2      	ldr	r2, [r2, #12]
 80009c2:	4311      	orrs	r1, r2
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	431a      	orrs	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	430a      	orrs	r2, r1
 80009e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2220      	movs	r2, #32
 8000a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	000186a0 	.word	0x000186a0
 8000a24:	001e847f 	.word	0x001e847f
 8000a28:	003d08ff 	.word	0x003d08ff
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	10624dd3 	.word	0x10624dd3

08000a34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000a54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b10      	cmp	r3, #16
 8000a62:	d003      	beq.n	8000a6c <HAL_I2C_EV_IRQHandler+0x38>
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b40      	cmp	r3, #64	; 0x40
 8000a68:	f040 80b6 	bne.w	8000bd8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10d      	bne.n	8000aa2 <HAL_I2C_EV_IRQHandler+0x6e>
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8000a8c:	d003      	beq.n	8000a96 <HAL_I2C_EV_IRQHandler+0x62>
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8000a94:	d101      	bne.n	8000a9a <HAL_I2C_EV_IRQHandler+0x66>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_I2C_EV_IRQHandler+0x68>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	f000 8127 	beq.w	8000cf0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00c      	beq.n	8000ac6 <HAL_I2C_EV_IRQHandler+0x92>
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	0a5b      	lsrs	r3, r3, #9
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f001 fa58 	bl	8001f6e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fc56 	bl	8001370 <I2C_Master_SB>
 8000ac4:	e087      	b.n	8000bd6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d009      	beq.n	8000ae6 <HAL_I2C_EV_IRQHandler+0xb2>
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	0a5b      	lsrs	r3, r3, #9
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fccb 	bl	800147a <I2C_Master_ADD10>
 8000ae4:	e077      	b.n	8000bd6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d009      	beq.n	8000b06 <HAL_I2C_EV_IRQHandler+0xd2>
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	0a5b      	lsrs	r3, r3, #9
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fce4 	bl	80014cc <I2C_Master_ADDR>
 8000b04:	e067      	b.n	8000bd6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d030      	beq.n	8000b74 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b20:	f000 80e8 	beq.w	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	09db      	lsrs	r3, r3, #7
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00f      	beq.n	8000b50 <HAL_I2C_EV_IRQHandler+0x11c>
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	0a9b      	lsrs	r3, r3, #10
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d009      	beq.n	8000b50 <HAL_I2C_EV_IRQHandler+0x11c>
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d103      	bne.n	8000b50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f937 	bl	8000dbc <I2C_MasterTransmit_TXE>
 8000b4e:	e042      	b.n	8000bd6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 80cb 	beq.w	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	0a5b      	lsrs	r3, r3, #9
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80c4 	beq.w	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fa1d 	bl	8000fac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000b72:	e0bf      	b.n	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b82:	f000 80b7 	beq.w	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	099b      	lsrs	r3, r3, #6
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00f      	beq.n	8000bb2 <HAL_I2C_EV_IRQHandler+0x17e>
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	0a9b      	lsrs	r3, r3, #10
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d009      	beq.n	8000bb2 <HAL_I2C_EV_IRQHandler+0x17e>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 fa74 	bl	8001098 <I2C_MasterReceive_RXNE>
 8000bb0:	e011      	b.n	8000bd6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 809a 	beq.w	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	0a5b      	lsrs	r3, r3, #9
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8093 	beq.w	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 fae4 	bl	800119c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000bd4:	e08e      	b.n	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8000bd6:	e08d      	b.n	8000cf4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d004      	beq.n	8000bea <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	e007      	b.n	8000bfa <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	085b      	lsrs	r3, r3, #1
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d012      	beq.n	8000c2c <HAL_I2C_EV_IRQHandler+0x1f8>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	0a5b      	lsrs	r3, r3, #9
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00c      	beq.n	8000c2c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8000c22:	69b9      	ldr	r1, [r7, #24]
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 fea8 	bl	800197a <I2C_Slave_ADDR>
 8000c2a:	e066      	b.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d009      	beq.n	8000c4c <HAL_I2C_EV_IRQHandler+0x218>
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	0a5b      	lsrs	r3, r3, #9
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 fedd 	bl	8001a04 <I2C_Slave_STOPF>
 8000c4a:	e056      	b.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	2b21      	cmp	r3, #33	; 0x21
 8000c50:	d002      	beq.n	8000c58 <HAL_I2C_EV_IRQHandler+0x224>
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	2b29      	cmp	r3, #41	; 0x29
 8000c56:	d125      	bne.n	8000ca4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	09db      	lsrs	r3, r3, #7
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00f      	beq.n	8000c84 <HAL_I2C_EV_IRQHandler+0x250>
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	0a9b      	lsrs	r3, r3, #10
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d009      	beq.n	8000c84 <HAL_I2C_EV_IRQHandler+0x250>
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d103      	bne.n	8000c84 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 fdc0 	bl	8001802 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000c82:	e039      	b.n	8000cf8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d033      	beq.n	8000cf8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	0a5b      	lsrs	r3, r3, #9
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d02d      	beq.n	8000cf8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 fded 	bl	800187c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000ca2:	e029      	b.n	8000cf8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	099b      	lsrs	r3, r3, #6
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00f      	beq.n	8000cd0 <HAL_I2C_EV_IRQHandler+0x29c>
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	0a9b      	lsrs	r3, r3, #10
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d009      	beq.n	8000cd0 <HAL_I2C_EV_IRQHandler+0x29c>
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d103      	bne.n	8000cd0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 fdf7 	bl	80018bc <I2C_SlaveReceive_RXNE>
 8000cce:	e014      	b.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00e      	beq.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	0a5b      	lsrs	r3, r3, #9
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d008      	beq.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 fe25 	bl	8001938 <I2C_SlaveReceive_BTF>
 8000cee:	e004      	b.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000cf8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
 8000d54:	4613      	mov	r3, r2
 8000d56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000dd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d150      	bne.n	8000e84 <I2C_MasterTransmit_TXE+0xc8>
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	2b21      	cmp	r3, #33	; 0x21
 8000de6:	d14d      	bne.n	8000e84 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d01d      	beq.n	8000e2a <I2C_MasterTransmit_TXE+0x6e>
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d01a      	beq.n	8000e2a <I2C_MasterTransmit_TXE+0x6e>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000dfa:	d016      	beq.n	8000e2a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e0a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2211      	movs	r2, #17
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff6c 	bl	8000d00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000e28:	e0bc      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e38:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e48:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2220      	movs	r2, #32
 8000e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b40      	cmp	r3, #64	; 0x40
 8000e62:	d107      	bne.n	8000e74 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff81 	bl	8000d74 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000e72:	e097      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff3f 	bl	8000d00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000e82:	e08f      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b21      	cmp	r3, #33	; 0x21
 8000e88:	d007      	beq.n	8000e9a <I2C_MasterTransmit_TXE+0xde>
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	2b40      	cmp	r3, #64	; 0x40
 8000e8e:	f040 8089 	bne.w	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	2b22      	cmp	r3, #34	; 0x22
 8000e96:	f040 8085 	bne.w	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8000eb4:	e076      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b40      	cmp	r3, #64	; 0x40
 8000ec0:	d15d      	bne.n	8000f7e <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d11d      	bne.n	8000f06 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d10b      	bne.n	8000eea <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee2:	1c9a      	adds	r2, r3, #2
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000ee8:	e05c      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	121b      	asrs	r3, r3, #8
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000f04:	e04e      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d10b      	bne.n	8000f26 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000f24:	e03e      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d13a      	bne.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b22      	cmp	r3, #34	; 0x22
 8000f38:	d108      	bne.n	8000f4c <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	e02b      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b21      	cmp	r3, #33	; 0x21
 8000f56:	d125      	bne.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8000f7c:	e012      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8000fa2:	e7ff      	b.n	8000fa4 <I2C_MasterTransmit_TXE+0x1e8>
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b21      	cmp	r3, #33	; 0x21
 8000fc4:	d164      	bne.n	8001090 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d012      	beq.n	8000ff6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8000ff4:	e04c      	b.n	8001090 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d01d      	beq.n	8001038 <I2C_MasterTransmit_BTF+0x8c>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b20      	cmp	r3, #32
 8001000:	d01a      	beq.n	8001038 <I2C_MasterTransmit_BTF+0x8c>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001008:	d016      	beq.n	8001038 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001018:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2211      	movs	r2, #17
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fe65 	bl	8000d00 <HAL_I2C_MasterTxCpltCallback>
}
 8001036:	e02b      	b.n	8001090 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001046:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001056:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2220      	movs	r2, #32
 8001062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b40      	cmp	r3, #64	; 0x40
 8001070:	d107      	bne.n	8001082 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fe7a 	bl	8000d74 <HAL_I2C_MemTxCpltCallback>
}
 8001080:	e006      	b.n	8001090 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fe38 	bl	8000d00 <HAL_I2C_MasterTxCpltCallback>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b22      	cmp	r3, #34	; 0x22
 80010aa:	d173      	bne.n	8001194 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d920      	bls.n	80010fc <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3b01      	subs	r3, #1
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d154      	bne.n	8001194 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010f8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80010fa:	e04b      	b.n	8001194 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	2b02      	cmp	r3, #2
 8001102:	d047      	beq.n	8001194 <I2C_MasterReceive_RXNE+0xfc>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d002      	beq.n	8001110 <I2C_MasterReceive_RXNE+0x78>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d141      	bne.n	8001194 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800111e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800112e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2220      	movs	r2, #32
 800115a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b40      	cmp	r3, #64	; 0x40
 8001168:	d10a      	bne.n	8001180 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fe04 	bl	8000d86 <HAL_I2C_MemRxCpltCallback>
}
 800117e:	e009      	b.n	8001194 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2212      	movs	r2, #18
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fdbf 	bl	8000d12 <HAL_I2C_MasterRxCpltCallback>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d11b      	bne.n	80011ec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011c2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80011ea:	e0bd      	b.n	8001368 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d129      	bne.n	800124a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001204:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d00a      	beq.n	8001222 <I2C_MasterReceive_BTF+0x86>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d007      	beq.n	8001222 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001220:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123e:	b29b      	uxth	r3, r3
 8001240:	3b01      	subs	r3, #1
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001248:	e08e      	b.n	8001368 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124e:	b29b      	uxth	r3, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d176      	bne.n	8001342 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d002      	beq.n	8001260 <I2C_MasterReceive_BTF+0xc4>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b10      	cmp	r3, #16
 800125e:	d108      	bne.n	8001272 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e019      	b.n	80012a6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d002      	beq.n	800127e <I2C_MasterReceive_BTF+0xe2>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d108      	bne.n	8001290 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e00a      	b.n	80012a6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b10      	cmp	r3, #16
 8001294:	d007      	beq.n	80012a6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001300:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2220      	movs	r2, #32
 8001306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b40      	cmp	r3, #64	; 0x40
 8001314:	d10a      	bne.n	800132c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fd2e 	bl	8000d86 <HAL_I2C_MemRxCpltCallback>
}
 800132a:	e01d      	b.n	8001368 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2212      	movs	r2, #18
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fce9 	bl	8000d12 <HAL_I2C_MasterRxCpltCallback>
}
 8001340:	e012      	b.n	8001368 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b40      	cmp	r3, #64	; 0x40
 8001382:	d117      	bne.n	80013b4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800139c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800139e:	e067      	b.n	8001470 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	611a      	str	r2, [r3, #16]
}
 80013b2:	e05d      	b.n	8001470 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013bc:	d133      	bne.n	8001426 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b21      	cmp	r3, #33	; 0x21
 80013c8:	d109      	bne.n	80013de <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	e008      	b.n	80013f0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <I2C_Master_SB+0x90>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d037      	beq.n	8001470 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	2b00      	cmp	r3, #0
 8001408:	d104      	bne.n	8001414 <I2C_Master_SB+0xa4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	2b00      	cmp	r3, #0
 8001412:	d02d      	beq.n	8001470 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001422:	605a      	str	r2, [r3, #4]
}
 8001424:	e024      	b.n	8001470 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10e      	bne.n	800144c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	b29b      	uxth	r3, r3
 8001434:	11db      	asrs	r3, r3, #7
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0306 	and.w	r3, r3, #6
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f063 030f 	orn	r3, r3, #15
 8001442:	b2da      	uxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	611a      	str	r2, [r3, #16]
}
 800144a:	e011      	b.n	8001470 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10d      	bne.n	8001470 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	b29b      	uxth	r3, r3
 800145a:	11db      	asrs	r3, r3, #7
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0306 	and.w	r3, r3, #6
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f063 030e 	orn	r3, r3, #14
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	611a      	str	r2, [r3, #16]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <I2C_Master_ADD10+0x24>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	2b00      	cmp	r3, #0
 800149c:	d011      	beq.n	80014c2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d104      	bne.n	80014b2 <I2C_Master_ADD10+0x38>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014c0:	605a      	str	r2, [r3, #4]
    }
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b091      	sub	sp, #68	; 0x44
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b22      	cmp	r3, #34	; 0x22
 80014f4:	f040 8174 	bne.w	80017e0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <I2C_Master_ADDR+0x54>
 8001500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001504:	2b40      	cmp	r3, #64	; 0x40
 8001506:	d10b      	bne.n	8001520 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
 800151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151e:	e16b      	b.n	80017f8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11d      	bne.n	8001564 <I2C_Master_ADDR+0x98>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001530:	d118      	bne.n	8001564 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001556:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	651a      	str	r2, [r3, #80]	; 0x50
 8001562:	e149      	b.n	80017f8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d113      	bne.n	8001596 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e120      	b.n	80017d8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	f040 808a 	bne.w	80016b6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015a8:	d137      	bne.n	800161a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015c8:	d113      	bne.n	80015f2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015d8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	e0f2      	b.n	80017d8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e0de      	b.n	80017d8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161c:	2b08      	cmp	r3, #8
 800161e:	d02e      	beq.n	800167e <I2C_Master_ADDR+0x1b2>
 8001620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001622:	2b20      	cmp	r3, #32
 8001624:	d02b      	beq.n	800167e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001628:	2b12      	cmp	r3, #18
 800162a:	d102      	bne.n	8001632 <I2C_Master_ADDR+0x166>
 800162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162e:	2b01      	cmp	r3, #1
 8001630:	d125      	bne.n	800167e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	2b04      	cmp	r3, #4
 8001636:	d00e      	beq.n	8001656 <I2C_Master_ADDR+0x18a>
 8001638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163a:	2b02      	cmp	r3, #2
 800163c:	d00b      	beq.n	8001656 <I2C_Master_ADDR+0x18a>
 800163e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001640:	2b10      	cmp	r3, #16
 8001642:	d008      	beq.n	8001656 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001664:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	e0ac      	b.n	80017d8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800168c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e090      	b.n	80017d8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d158      	bne.n	8001772 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80016c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d021      	beq.n	800170a <I2C_Master_ADDR+0x23e>
 80016c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d01e      	beq.n	800170a <I2C_Master_ADDR+0x23e>
 80016cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d01b      	beq.n	800170a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e012      	b.n	8001730 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001718:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800173e:	d14b      	bne.n	80017d8 <I2C_Master_ADDR+0x30c>
 8001740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001742:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001746:	d00b      	beq.n	8001760 <I2C_Master_ADDR+0x294>
 8001748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174a:	2b01      	cmp	r3, #1
 800174c:	d008      	beq.n	8001760 <I2C_Master_ADDR+0x294>
 800174e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001750:	2b08      	cmp	r3, #8
 8001752:	d005      	beq.n	8001760 <I2C_Master_ADDR+0x294>
 8001754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001756:	2b10      	cmp	r3, #16
 8001758:	d002      	beq.n	8001760 <I2C_Master_ADDR+0x294>
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	2b20      	cmp	r3, #32
 800175e:	d13b      	bne.n	80017d8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	e032      	b.n	80017d8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001780:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001790:	d117      	bne.n	80017c2 <I2C_Master_ADDR+0x2f6>
 8001792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001798:	d00b      	beq.n	80017b2 <I2C_Master_ADDR+0x2e6>
 800179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179c:	2b01      	cmp	r3, #1
 800179e:	d008      	beq.n	80017b2 <I2C_Master_ADDR+0x2e6>
 80017a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d005      	beq.n	80017b2 <I2C_Master_ADDR+0x2e6>
 80017a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d002      	beq.n	80017b2 <I2C_Master_ADDR+0x2e6>
 80017ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d107      	bne.n	80017c2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80017de:	e00b      	b.n	80017f8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
}
 80017f6:	e7ff      	b.n	80017f8 <I2C_Master_ADDR+0x32c>
 80017f8:	bf00      	nop
 80017fa:	3744      	adds	r7, #68	; 0x44
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001810:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d02b      	beq.n	8001874 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d114      	bne.n	8001874 <I2C_SlaveTransmit_TXE+0x72>
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	2b29      	cmp	r3, #41	; 0x29
 800184e:	d111      	bne.n	8001874 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2221      	movs	r2, #33	; 0x21
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2228      	movs	r2, #40	; 0x28
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fa58 	bl	8000d24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d011      	beq.n	80018b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d02c      	beq.n	8001930 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d114      	bne.n	8001930 <I2C_SlaveReceive_RXNE+0x74>
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b2a      	cmp	r3, #42	; 0x2a
 800190a:	d111      	bne.n	8001930 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2222      	movs	r2, #34	; 0x22
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2228      	movs	r2, #40	; 0x28
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fa03 	bl	8000d36 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d012      	beq.n	8001970 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001994:	2b28      	cmp	r3, #40	; 0x28
 8001996:	d127      	bne.n	80019e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	09db      	lsrs	r3, r3, #7
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	81bb      	strh	r3, [r7, #12]
 80019ca:	e002      	b.n	80019d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80019da:	89ba      	ldrh	r2, [r7, #12]
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff f9b1 	bl	8000d48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80019e6:	e008      	b.n	80019fa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0202 	mvn.w	r2, #2
 80019f0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a60:	d172      	bne.n	8001b48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b22      	cmp	r3, #34	; 0x22
 8001a66:	d002      	beq.n	8001a6e <I2C_Slave_STOPF+0x6a>
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a6c:	d135      	bne.n	8001ada <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd36 	bl	8000518 <HAL_DMA_GetState>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d049      	beq.n	8001b46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	4a69      	ldr	r2, [pc, #420]	; (8001c5c <I2C_Slave_STOPF+0x258>)
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fcb4 	bl	800042c <HAL_DMA_Abort_IT>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d03d      	beq.n	8001b46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001ad8:	e035      	b.n	8001b46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd00 	bl	8000518 <HAL_DMA_GetState>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d014      	beq.n	8001b48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <I2C_Slave_STOPF+0x258>)
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fc7e 	bl	800042c <HAL_DMA_Abort_IT>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b40:	4610      	mov	r0, r2
 8001b42:	4798      	blx	r3
 8001b44:	e000      	b.n	8001b48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001b46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d03e      	beq.n	8001bd0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d112      	bne.n	8001b86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d112      	bne.n	8001bba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f843 	bl	8001c64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001bde:	e039      	b.n	8001c54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b2a      	cmp	r3, #42	; 0x2a
 8001be4:	d109      	bne.n	8001bfa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2228      	movs	r2, #40	; 0x28
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff f89e 	bl	8000d36 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b28      	cmp	r3, #40	; 0x28
 8001c04:	d111      	bne.n	8001c2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <I2C_Slave_STOPF+0x25c>)
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff f89d 	bl	8000d62 <HAL_I2C_ListenCpltCallback>
}
 8001c28:	e014      	b.n	8001c54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	2b22      	cmp	r3, #34	; 0x22
 8001c30:	d002      	beq.n	8001c38 <I2C_Slave_STOPF+0x234>
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b22      	cmp	r3, #34	; 0x22
 8001c36:	d10d      	bne.n	8001c54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff f871 	bl	8000d36 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08001e91 	.word	0x08001e91
 8001c60:	ffff0000 	.word	0xffff0000

08001c64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c72:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d10a      	bne.n	8001c96 <I2C_ITError+0x32>
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b22      	cmp	r3, #34	; 0x22
 8001c84:	d107      	bne.n	8001c96 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c9c:	2b28      	cmp	r3, #40	; 0x28
 8001c9e:	d107      	bne.n	8001cb0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2228      	movs	r2, #40	; 0x28
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001cae:	e015      	b.n	8001cdc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cbe:	d006      	beq.n	8001cce <I2C_ITError+0x6a>
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b60      	cmp	r3, #96	; 0x60
 8001cc4:	d003      	beq.n	8001cce <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cea:	d161      	bne.n	8001db0 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d020      	beq.n	8001d4a <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	; (8001e88 <I2C_ITError+0x224>)
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fb89 	bl	800042c <HAL_DMA_Abort_IT>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8089 	beq.w	8001e34 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d44:	4610      	mov	r0, r2
 8001d46:	4798      	blx	r3
 8001d48:	e074      	b.n	8001e34 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <I2C_ITError+0x224>)
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fb68 	bl	800042c <HAL_DMA_Abort_IT>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d068      	beq.n	8001e34 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d10b      	bne.n	8001d88 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001daa:	4610      	mov	r0, r2
 8001dac:	4798      	blx	r3
 8001dae:	e041      	b.n	8001e34 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b60      	cmp	r3, #96	; 0x60
 8001dba:	d125      	bne.n	8001e08 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d10b      	bne.n	8001df0 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7fe ffd2 	bl	8000daa <HAL_I2C_AbortCpltCallback>
 8001e06:	e015      	b.n	8001e34 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d10b      	bne.n	8001e2e <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe ffb2 	bl	8000d98 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d11b      	bne.n	8001e80 <I2C_ITError+0x21c>
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b28      	cmp	r3, #40	; 0x28
 8001e4c:	d118      	bne.n	8001e80 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e5c:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <I2C_ITError+0x228>)
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe ff71 	bl	8000d62 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	08001e91 	.word	0x08001e91
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	2200      	movs	r2, #0
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b60      	cmp	r3, #96	; 0x60
 8001ef6:	d10e      	bne.n	8001f16 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7fe ff4b 	bl	8000daa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f14:	e027      	b.n	8001f66 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f1c:	2b28      	cmp	r3, #40	; 0x28
 8001f1e:	d117      	bne.n	8001f50 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2228      	movs	r2, #40	; 0x28
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001f4e:	e007      	b.n	8001f60 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7fe ff19 	bl	8000d98 <HAL_I2C_ErrorCallback>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f7e:	d103      	bne.n	8001f88 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f86:	e007      	b.n	8001f98 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f90:	d102      	bne.n	8001f98 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2208      	movs	r2, #8
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e26c      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8087 	beq.w	80020d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d00c      	beq.n	8001fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd0:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d112      	bne.n	8002002 <HAL_RCC_OscConfig+0x5e>
 8001fdc:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d10b      	bne.n	8002002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fea:	4b89      	ldr	r3, [pc, #548]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d06c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x12c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d168      	bne.n	80020d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e246      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x76>
 800200c:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a7f      	ldr	r2, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e02e      	b.n	8002078 <HAL_RCC_OscConfig+0xd4>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x98>
 8002022:	4b7b      	ldr	r3, [pc, #492]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a7a      	ldr	r2, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b78      	ldr	r3, [pc, #480]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a77      	ldr	r2, [pc, #476]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e01d      	b.n	8002078 <HAL_RCC_OscConfig+0xd4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0xbc>
 8002046:	4b72      	ldr	r3, [pc, #456]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a71      	ldr	r2, [pc, #452]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6e      	ldr	r2, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e00b      	b.n	8002078 <HAL_RCC_OscConfig+0xd4>
 8002060:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b68      	ldr	r3, [pc, #416]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a67      	ldr	r2, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe f8bc 	bl	80001fc <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002088:	f7fe f8b8 	bl	80001fc <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1fa      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0xe4>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe f8a8 	bl	80001fc <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7fe f8a4 	bl	80001fc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1e6      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x10c>
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d063      	beq.n	80021a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d11c      	bne.n	8002130 <HAL_RCC_OscConfig+0x18c>
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d116      	bne.n	8002130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_RCC_OscConfig+0x176>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e1ba      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4939      	ldr	r1, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	e03a      	b.n	80021a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_RCC_OscConfig+0x270>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe f85d 	bl	80001fc <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe f859 	bl	80001fc <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e19b      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4927      	ldr	r1, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
 8002178:	e015      	b.n	80021a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_RCC_OscConfig+0x270>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe f83c 	bl	80001fc <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7fe f838 	bl	80001fc <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e17a      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d03a      	beq.n	8002228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d019      	beq.n	80021ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_RCC_OscConfig+0x274>)
 80021bc:	2201      	movs	r2, #1
 80021be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7fe f81c 	bl	80001fc <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7fe f818 	bl	80001fc <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e15a      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 fada 	bl	80027a0 <RCC_Delay>
 80021ec:	e01c      	b.n	8002228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_OscConfig+0x274>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7fe f802 	bl	80001fc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fa:	e00f      	b.n	800221c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fc:	f7fd fffe 	bl	80001fc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d908      	bls.n	800221c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e140      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	42420000 	.word	0x42420000
 8002218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e9      	bne.n	80021fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a6 	beq.w	8002382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b97      	ldr	r3, [pc, #604]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b94      	ldr	r3, [pc, #592]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a93      	ldr	r2, [pc, #588]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b91      	ldr	r3, [pc, #580]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b8e      	ldr	r3, [pc, #568]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226e:	4b8b      	ldr	r3, [pc, #556]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a8a      	ldr	r2, [pc, #552]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7fd ffbf 	bl	80001fc <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7fd ffbb 	bl	80001fc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0fd      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	4b81      	ldr	r3, [pc, #516]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x312>
 80022a8:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a7a      	ldr	r2, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	e02d      	b.n	8002312 <HAL_RCC_OscConfig+0x36e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x334>
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a75      	ldr	r2, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4b73      	ldr	r3, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a72      	ldr	r2, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	e01c      	b.n	8002312 <HAL_RCC_OscConfig+0x36e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x356>
 80022e0:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a6c      	ldr	r2, [pc, #432]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x36e>
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a66      	ldr	r2, [pc, #408]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fd ff6f 	bl	80001fc <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fd ff6b 	bl	80001fc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0ab      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	4b57      	ldr	r3, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <HAL_RCC_OscConfig+0x37e>
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fd ff59 	bl	80001fc <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fd ff55 	bl	80001fc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e095      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b48      	ldr	r3, [pc, #288]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a47      	ldr	r2, [pc, #284]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8081 	beq.w	800248e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d061      	beq.n	800245c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d146      	bne.n	800242e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fd ff29 	bl	80001fc <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fd ff25 	bl	80001fc <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e067      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d108      	bne.n	80023e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	492d      	ldr	r1, [pc, #180]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a19      	ldr	r1, [r3, #32]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	430b      	orrs	r3, r1
 80023fa:	4927      	ldr	r1, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fd fef9 	bl	80001fc <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7fd fef5 	bl	80001fc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e037      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x46a>
 800242c:	e02f      	b.n	800248e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fd fee2 	bl	80001fc <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7fd fede 	bl	80001fc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e020      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x498>
 800245a:	e018      	b.n	800248e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e013      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	42420060 	.word	0x42420060

080024a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0d0      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d910      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4965      	ldr	r1, [pc, #404]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800250a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d040      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d115      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e073      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06b      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4936      	ldr	r1, [pc, #216]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002594:	f7fd fe32 	bl	80001fc <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fd fe2e 	bl	80001fc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e053      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d210      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4922      	ldr	r1, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4601      	mov	r1, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c8>)
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	fa21 f303 	lsr.w	r3, r1, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1cc>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1d0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd fd90 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000
 8002668:	40021000 	.word	0x40021000
 800266c:	080033b8 	.word	0x080033b8
 8002670:	20000008 	.word	0x20000008
 8002674:	20000000 	.word	0x20000000

08002678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	b490      	push	{r4, r7}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002680:	1d3c      	adds	r4, r7, #4
 8002682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <HAL_RCC_GetSysClockFreq+0xb4>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x40>
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x46>
 80026b6:	e02d      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ba:	623b      	str	r3, [r7, #32]
      break;
 80026bc:	e02d      	b.n	800271a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	0c9b      	lsrs	r3, r3, #18
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ca:	4413      	add	r3, r2
 80026cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c5b      	lsrs	r3, r3, #17
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ea:	4413      	add	r3, r2
 80026ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026f6:	fb02 f203 	mul.w	r2, r2, r3
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e004      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	623b      	str	r3, [r7, #32]
      break;
 8002712:	e002      	b.n	800271a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002716:	623b      	str	r3, [r7, #32]
      break;
 8002718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271a:	6a3b      	ldr	r3, [r7, #32]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bc90      	pop	{r4, r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	080033a4 	.word	0x080033a4
 800272c:	080033b4 	.word	0x080033b4
 8002730:	40021000 	.word	0x40021000
 8002734:	007a1200 	.word	0x007a1200
 8002738:	003d0900 	.word	0x003d0900

0800273c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b02      	ldr	r3, [pc, #8]	; (800274c <HAL_RCC_GetHCLKFreq+0x10>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	20000008 	.word	0x20000008

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002754:	f7ff fff2 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8002758:	4601      	mov	r1, r0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4a03      	ldr	r2, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	080033c8 	.word	0x080033c8

08002778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800277c:	f7ff ffde 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8002780:	4601      	mov	r1, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0adb      	lsrs	r3, r3, #11
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_RCC_GetPCLK2Freq+0x24>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	080033c8 	.word	0x080033c8

080027a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <RCC_Delay+0x34>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <RCC_Delay+0x38>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0a5b      	lsrs	r3, r3, #9
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027bc:	bf00      	nop
  }
  while (Delay --);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	60fa      	str	r2, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <RCC_Delay+0x1c>
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000008 	.word	0x20000008
 80027d8:	10624dd3 	.word	0x10624dd3

080027dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e03f      	b.n	800286e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fcaa 	bl	800315c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fa5f 	bl	8002ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_UART_IRQHandler+0x52>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f98d 	bl	8002be2 <UART_Receive_IT>
      return;
 80028c8:	e0cc      	b.n	8002a64 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80ab 	beq.w	8002a28 <HAL_UART_IRQHandler+0x1b0>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_UART_IRQHandler+0x70>
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80a0 	beq.w	8002a28 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_UART_IRQHandler+0x90>
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_UART_IRQHandler+0xb0>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	f043 0202 	orr.w	r2, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_UART_IRQHandler+0xd0>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	f043 0204 	orr.w	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_UART_IRQHandler+0xf0>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	f043 0208 	orr.w	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d078      	beq.n	8002a62 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_UART_IRQHandler+0x112>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f92c 	bl	8002be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_UART_IRQHandler+0x13a>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d031      	beq.n	8002a16 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f877 	bl	8002aa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d023      	beq.n	8002a0e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_UART_IRQHandler+0x1f4>)
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fd1e 	bl	800042c <HAL_DMA_Abort_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a00:	4610      	mov	r0, r2
 8002a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e00e      	b.n	8002a24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f844 	bl	8002a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00a      	b.n	8002a24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f840 	bl	8002a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e006      	b.n	8002a24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f83c 	bl	8002a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a22:	e01e      	b.n	8002a62 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	bf00      	nop
    return;
 8002a26:	e01c      	b.n	8002a62 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_UART_IRQHandler+0x1cc>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f863 	bl	8002b08 <UART_Transmit_IT>
    return;
 8002a42:	e00f      	b.n	8002a64 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_UART_IRQHandler+0x1ec>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f8aa 	bl	8002bb2 <UART_EndTransmit_IT>
    return;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002a62:	bf00      	nop
  }
}
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08002ae1 	.word	0x08002ae1

08002a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002abc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff ffca 	bl	8002a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b21      	cmp	r3, #33	; 0x21
 8002b1a:	d144      	bne.n	8002ba6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d11a      	bne.n	8002b5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	1c9a      	adds	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	621a      	str	r2, [r3, #32]
 8002b4e:	e00e      	b.n	8002b6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]
 8002b5a:	e008      	b.n	8002b6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	1c59      	adds	r1, r3, #1
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6211      	str	r1, [r2, #32]
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ff4c 	bl	8002a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b22      	cmp	r3, #34	; 0x22
 8002bf4:	d171      	bne.n	8002cda <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d123      	bne.n	8002c48 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	1c9a      	adds	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
 8002c2a:	e029      	b.n	8002c80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28
 8002c46:	e01b      	b.n	8002c80 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6858      	ldr	r0, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6291      	str	r1, [r2, #40]	; 0x28
 8002c60:	b2c2      	uxtb	r2, r0
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e00c      	b.n	8002c80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	1c58      	adds	r0, r3, #1
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6288      	str	r0, [r1, #40]	; 0x28
 8002c78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d120      	bne.n	8002cd6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0220 	bic.w	r2, r2, #32
 8002ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fed8 	bl	8002a82 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e002      	b.n	8002cdc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d1e:	f023 030c 	bic.w	r3, r3, #12
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <UART_SetConfig+0x1ac>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d14e      	bne.n	8002dea <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d4c:	f7ff fd14 	bl	8002778 <HAL_RCC_GetPCLK2Freq>
 8002d50:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009a      	lsls	r2, r3, #2
 8002d5c:	441a      	add	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	4a4a      	ldr	r2, [pc, #296]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	0119      	lsls	r1, r3, #4
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009a      	lsls	r2, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d88:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002d8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2064      	movs	r0, #100	; 0x64
 8002d92:	fb00 f303 	mul.w	r3, r0, r3
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	3332      	adds	r3, #50	; 0x32
 8002d9c:	4a3d      	ldr	r2, [pc, #244]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da8:	4419      	add	r1, r3
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc0:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	fb00 f303 	mul.w	r3, r0, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	; 0x32
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	440a      	add	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002de8:	e04d      	b.n	8002e86 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dea:	f7ff fcb1 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8002dee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009a      	lsls	r2, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	4a23      	ldr	r2, [pc, #140]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	0119      	lsls	r1, r3, #4
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	441a      	add	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002e28:	fba3 0302 	umull	r0, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2064      	movs	r0, #100	; 0x64
 8002e30:	fb00 f303 	mul.w	r3, r0, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	3332      	adds	r3, #50	; 0x32
 8002e3a:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e46:	4419      	add	r1, r3
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	441a      	add	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002e60:	fba3 0302 	umull	r0, r3, r3, r2
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	2064      	movs	r0, #100	; 0x64
 8002e68:	fb00 f303 	mul.w	r3, r0, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	3332      	adds	r3, #50	; 0x32
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <UART_SetConfig+0x1b0>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	440a      	add	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40013800 	.word	0x40013800
 8002e94:	51eb851f 	.word	0x51eb851f

08002e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e9c:	f7fd f956 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ea0:	f000 f807 	bl	8002eb2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea4:	f000 f8a2 	bl	8002fec <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ea8:	f000 f848 	bl	8002f3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002eac:	f000 f874 	bl	8002f98 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <main+0x18>

08002eb2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b090      	sub	sp, #64	; 0x40
 8002eb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eb8:	f107 0318 	add.w	r3, r7, #24
 8002ebc:	2228      	movs	r2, #40	; 0x28
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fa5b 	bl	800337c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002edc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ef0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef6:	f107 0318 	add.w	r3, r7, #24
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff f852 	bl	8001fa4 <HAL_RCC_OscConfig>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002f06:	f000 f8ab 	bl	8003060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f0a:	230f      	movs	r3, #15
 8002f0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fabd 	bl	80024a4 <HAL_RCC_ClockConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002f30:	f000 f896 	bl	8003060 <Error_Handler>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3740      	adds	r7, #64	; 0x40
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <MX_I2C1_Init+0x54>)
 8002f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <MX_I2C1_Init+0x58>)
 8002f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f78:	4804      	ldr	r0, [pc, #16]	; (8002f8c <MX_I2C1_Init+0x50>)
 8002f7a:	f7fd fc33 	bl	80007e4 <HAL_I2C_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f84:	f000 f86c 	bl	8003060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000002c 	.word	0x2000002c
 8002f90:	40005400 	.word	0x40005400
 8002f94:	000186a0 	.word	0x000186a0

08002f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <MX_USART1_UART_Init+0x50>)
 8002fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fd0:	f7ff fc04 	bl	80027dc <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fda:	f000 f841 	bl	8003060 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000080 	.word	0x20000080
 8002fe8:	40013800 	.word	0x40013800

08002fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <MX_GPIO_Init+0x70>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	4a19      	ldr	r2, [pc, #100]	; (800305c <MX_GPIO_Init+0x70>)
 8002ff8:	f043 0310 	orr.w	r3, r3, #16
 8002ffc:	6193      	str	r3, [r2, #24]
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <MX_GPIO_Init+0x70>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <MX_GPIO_Init+0x70>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <MX_GPIO_Init+0x70>)
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	6193      	str	r3, [r2, #24]
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <MX_GPIO_Init+0x70>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_GPIO_Init+0x70>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4a0d      	ldr	r2, [pc, #52]	; (800305c <MX_GPIO_Init+0x70>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6193      	str	r3, [r2, #24]
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <MX_GPIO_Init+0x70>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <MX_GPIO_Init+0x70>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	4a07      	ldr	r2, [pc, #28]	; (800305c <MX_GPIO_Init+0x70>)
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	6193      	str	r3, [r2, #24]
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <MX_GPIO_Init+0x70>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	683b      	ldr	r3, [r7, #0]

}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40021000 	.word	0x40021000

08003060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_MspInit+0x5c>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_MspInit+0x5c>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6193      	str	r3, [r2, #24]
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_MspInit+0x5c>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_MspInit+0x5c>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_MspInit+0x5c>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_MspInit+0x5c>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_MspInit+0x60>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <HAL_MspInit+0x60>)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40010000 	.word	0x40010000

080030d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_I2C_MspInit+0x80>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d12b      	bne.n	8003148 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f0:	4b18      	ldr	r3, [pc, #96]	; (8003154 <HAL_I2C_MspInit+0x84>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_I2C_MspInit+0x84>)
 80030f6:	f043 0308 	orr.w	r3, r3, #8
 80030fa:	6193      	str	r3, [r2, #24]
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_I2C_MspInit+0x84>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800310c:	2312      	movs	r3, #18
 800310e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	4619      	mov	r1, r3
 800311a:	480f      	ldr	r0, [pc, #60]	; (8003158 <HAL_I2C_MspInit+0x88>)
 800311c:	f7fd fa08 	bl	8000530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_I2C_MspInit+0x84>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_I2C_MspInit+0x84>)
 8003126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800312a:	61d3      	str	r3, [r2, #28]
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_I2C_MspInit+0x84>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003138:	2200      	movs	r2, #0
 800313a:	2100      	movs	r1, #0
 800313c:	201f      	movs	r0, #31
 800313e:	f7fd f93e 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003142:	201f      	movs	r0, #31
 8003144:	f7fd f957 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003148:	bf00      	nop
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40005400 	.word	0x40005400
 8003154:	40021000 	.word	0x40021000
 8003158:	40010c00 	.word	0x40010c00

0800315c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_UART_MspInit+0x9c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d139      	bne.n	80031f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_UART_MspInit+0xa0>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_UART_MspInit+0xa0>)
 8003182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003186:	6193      	str	r3, [r2, #24]
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_UART_MspInit+0xa0>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_UART_MspInit+0xa0>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_UART_MspInit+0xa0>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	6193      	str	r3, [r2, #24]
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_UART_MspInit+0xa0>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0310 	add.w	r3, r7, #16
 80031be:	4619      	mov	r1, r3
 80031c0:	480f      	ldr	r0, [pc, #60]	; (8003200 <HAL_UART_MspInit+0xa4>)
 80031c2:	f7fd f9b5 	bl	8000530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	4619      	mov	r1, r3
 80031da:	4809      	ldr	r0, [pc, #36]	; (8003200 <HAL_UART_MspInit+0xa4>)
 80031dc:	f7fd f9a8 	bl	8000530 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2101      	movs	r1, #1
 80031e4:	2025      	movs	r0, #37	; 0x25
 80031e6:	f7fd f8ea 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031ea:	2025      	movs	r0, #37	; 0x25
 80031ec:	f7fd f903 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031f0:	bf00      	nop
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40021000 	.word	0x40021000
 8003200:	40010800 	.word	0x40010800

08003204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <HardFault_Handler+0x4>

08003216 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <MemManage_Handler+0x4>

0800321c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <BusFault_Handler+0x4>

08003222 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <UsageFault_Handler+0x4>

08003228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003250:	f7fc ffc2 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <I2C1_EV_IRQHandler+0x10>)
 800325e:	f7fd fbe9 	bl	8000a34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000002c 	.word	0x2000002c

0800326c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <USART1_IRQHandler+0x10>)
 8003272:	f7ff fb01 	bl	8002878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000080 	.word	0x20000080

08003280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <SystemInit+0x5c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <SystemInit+0x5c>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <SystemInit+0x5c>)
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4911      	ldr	r1, [pc, #68]	; (80032dc <SystemInit+0x5c>)
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <SystemInit+0x60>)
 8003298:	4013      	ands	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <SystemInit+0x5c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <SystemInit+0x5c>)
 80032a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <SystemInit+0x5c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <SystemInit+0x5c>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <SystemInit+0x5c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <SystemInit+0x5c>)
 80032be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80032c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <SystemInit+0x5c>)
 80032c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80032ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <SystemInit+0x64>)
 80032ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40021000 	.word	0x40021000
 80032e0:	f8ff0000 	.word	0xf8ff0000
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80032e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80032ea:	e003      	b.n	80032f4 <LoopCopyDataInit>

080032ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80032ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80032f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80032f2:	3104      	adds	r1, #4

080032f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80032f4:	480a      	ldr	r0, [pc, #40]	; (8003320 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80032f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80032fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80032fc:	d3f6      	bcc.n	80032ec <CopyDataInit>
  ldr r2, =_sbss
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003300:	e002      	b.n	8003308 <LoopFillZerobss>

08003302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003304:	f842 3b04 	str.w	r3, [r2], #4

08003308 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800330a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800330c:	d3f9      	bcc.n	8003302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800330e:	f7ff ffb7 	bl	8003280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003312:	f000 f80f 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003316:	f7ff fdbf 	bl	8002e98 <main>
  bx lr
 800331a:	4770      	bx	lr
  ldr r3, =_sidata
 800331c:	080033d8 	.word	0x080033d8
  ldr r0, =_sdata
 8003320:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003324:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003328:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800332c:	200000c0 	.word	0x200000c0

08003330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003330:	e7fe      	b.n	8003330 <ADC1_2_IRQHandler>
	...

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	2500      	movs	r5, #0
 8003338:	4e0c      	ldr	r6, [pc, #48]	; (800336c <__libc_init_array+0x38>)
 800333a:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <__libc_init_array+0x3c>)
 800333c:	1ba4      	subs	r4, r4, r6
 800333e:	10a4      	asrs	r4, r4, #2
 8003340:	42a5      	cmp	r5, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	f000 f822 	bl	800338c <_init>
 8003348:	2500      	movs	r5, #0
 800334a:	4e0a      	ldr	r6, [pc, #40]	; (8003374 <__libc_init_array+0x40>)
 800334c:	4c0a      	ldr	r4, [pc, #40]	; (8003378 <__libc_init_array+0x44>)
 800334e:	1ba4      	subs	r4, r4, r6
 8003350:	10a4      	asrs	r4, r4, #2
 8003352:	42a5      	cmp	r5, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800335c:	4798      	blx	r3
 800335e:	3501      	adds	r5, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003366:	4798      	blx	r3
 8003368:	3501      	adds	r5, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	080033d0 	.word	0x080033d0
 8003370:	080033d0 	.word	0x080033d0
 8003374:	080033d0 	.word	0x080033d0
 8003378:	080033d4 	.word	0x080033d4

0800337c <memset>:
 800337c:	4603      	mov	r3, r0
 800337e:	4402      	add	r2, r0
 8003380:	4293      	cmp	r3, r2
 8003382:	d100      	bne.n	8003386 <memset+0xa>
 8003384:	4770      	bx	lr
 8003386:	f803 1b01 	strb.w	r1, [r3], #1
 800338a:	e7f9      	b.n	8003380 <memset+0x4>

0800338c <_init>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr

08003398 <_fini>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr
